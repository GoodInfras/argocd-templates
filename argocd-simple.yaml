apps_values:
  git@github.com/ThomasInfras/argocd-template/argocd-simple_tpl:
    domain: ".site.com"
    mainRepoURL: "ssh://git@github.com/ThomasInfras/k8s-automated-ovh"
    adminArgo: ""
    ingressClassName: "nginx"
objects:
  config-map-helm-replace:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-map-helm-replace
      namespace: argocd
    data:
      helm: |-
        #!/bin/bash

        HELM_BIN=${HELM_BIN:-helm}

        new_args=()
        template_found=false

        for arg in "$@"; do
          if [[ "$arg" == "template" ]]; then
            template_found=true
            new_args+=("$arg")
          elif $template_found && [[ "${#new_args[@]}" -eq 1 ]]; then
            new_args+=("--dry-run=server" "$arg")
            template_found=false
          else
            new_args+=("$arg")
          fi
        done

        $HELM_BIN "${new_args[@]}"
  argocd-repo-server-access:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: argocd-repo-server-access
      namespace: argocd
    rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list", "watch"]

  argocd-repo-server-access-binding:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: argocd-repo-server-access-binding
      namespace: argocd
    subjects:
    - kind: ServiceAccount
      name: argocd-repo-server
      namespace: argocd
    roleRef:
      kind: ClusterRole
      name: argocd-repo-server-access
      apiGroup: rbac.authorization.k8s.io

  testauth:
    apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: testauth  
      namespace: argocd-infra
    spec:
      basicAuth:
        #headerField: X-WebAuth-User
        secret: basic-auth
        realm: "Traefik-ovh"
        #removeHeader: true

objects_tpl_string: |
  {{ $appsValues :=  (get .Values.apps_values "git@github.com/ThomasInfras/argocd-template/argocd-simple")  }}
  secret:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: auth
      namespace: argocd-infra
    data:
      users: |
        harborAdminPassword: {{ derivePassword 1 "long" ((lookup "v1" "Secret" "argocd-infra" "private-repo").data.sshPrivateKey | sha256sum )  "admin" "harbor.local" }}
        admin: {{ (derivePassword 1 "long" ((lookup "v1" "Secret" "argocd-infra" "private-repo").data.sshPrivateKey | sha256sum )  "admin" "argo.local"  )  }}
        a36235: {{ (derivePassword 1 "long" ((lookup "v1" "Secret" "argocd-infra" "private-repo").data.sshPrivateKey | sha256sum )  "a36235" "ingress.local"  )   }}
  basic-auth:
    apiVersion: v1
    kind: Secret
    metadata:
      name: basic-auth
      namespace: argocd
    #type: Opaque
    stringData:
      auth: {{  htpasswd "a36235" (derivePassword 1 "long" ((lookup "v1" "Secret" "argocd-infra" "private-repo").data.sshPrivateKey | sha256sum )  "a36235" "ingress.local"  )   }}

apps_tpl_dict:
  git@github.com/ThomasInfras/argocd-template/argocd-simple:
    argocd:
      metadata:
        namespace: argocd-infra
      force: true
      spec:
        destination: 
          namespace: argocd
        sources:
          - repoURL: 'https://argoproj.github.io/argo-helm'
            chart: argo-cd
            targetRevision: '">0.0.0"'
            helm:
              values: |
                configs:
                  cm:
                    application.instanceLabelKey: argocd.argoproj.io/instance-argocd
                  #secret:
                    #argocdServerAdminPassword: {{  htpasswd "admin" (derivePassword 1 "long" ((lookup "v1" "Secret" "argocd-infra" "private-repo").data.sshPrivateKey | sha256sum )  "admin" "argo.local"  )   }}
                global:
                  domain: argocd{{ $appsValues.domain }}
                server:
                  ingress:
                    ingressClassName: {{ $appsValues.ingressClassName }}
                    enabled: true
                    annotations:
                      nginx.ingress.kubernetes.io/auth-type: basic
                      nginx.ingress.kubernetes.io/auth-secret: basic-auth
                      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - ok"                
                      gethomepage.dev/enabled: "true"
                      gethomepage.dev/name: "ARGOCD"
                      gethomepage.dev/pod-selector: "app.kubernetes.io/component=server"
                      #traefik.ingress.kubernetes.io/router.tls: "true"
                      #traefik.ingress.kubernetes.io/router.middlewares: argocd-infra-testauth@kubernetescrd
                      #nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                      nginx.ingress.kubernetes.io/ssl-redirect: "false"     
                      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
                      nginx.ingress.kubernetes.io/hsts: "false"
                      #nginx.ingress.kubernetes.io/rewrite-target: /
                      #nginx.ingress.kubernetes.io/secure-backends: "true"
                      #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                      #nginx.ingress.kubernetes.io/auth-tls-verify-client: "off"
                      #nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
                      #nginx.ingress.kubernetes.io/proxy-ssl-verify-depth: 0                    
                #for argocd lookup      
                repoServer:
                  volumes:
                    - name: helm-replace
                      configMap:
                        name: config-map-helm-replace
                        defaultMode: 0777
                  volumeMounts:
                    - name: helm-replace
                      mountPath: /usr/local/sbin/helm
                      subPath: helm
                  env:
                    - name: HELM_BIN
                      value: /usr/local/bin/helm
    k8s-argocd-apps:
      metadata:
        namespace: argocd          
      spec:
        destination: 
          namespace: argocd            
        sources:
          - repoURL: {{ $appsValues.repoURL }}
            targetRevision: HEAD
            path: k8s-argocd-apps
